install.packages("jsonlite")
install.packages("Rcurl")
install.packages("httr")
install.packages("xml2")
library(jsonlite)
library(httr)
library(RCurl)

# Authentication (Client Id and Secret- make spotify developer account) 


client_id <-"XXXXXXXXXX"
client_secret <-"XXXXXXXXXXXXXXXXX"

id_secret <- base64(paste(client_id,client_secret,sep=':'))[[1]]
my_headers <- add_headers(c(Authorization=paste('Basic',id_secret,sep=' ')))
my_body <- list(grant_type='client_credentials')
my_token <- content(POST('https://accounts.spotify.com/api/token', my_headers,body=my_body,encode='form'))

#bearer authorzation
auth_token <- add_headers(c(Authorization = paste("Bearer", my_token$access_token, sep = " ")))
auth_token



# Define Search Artists function 

# Base API and endpoint 

base <- "https://api.spotify.com/"
auth_endpoint <- "api/token"
search_endpoint <- "v1/search"
artist_endpoint <- "v1/artists/"

# This part returns the artist URI with get_artist_ID ("artist name")

get_artist_ID <- function(artist = "bob dylan", search_type = "artist", limit = 1){
  search_url <- paste0(base, search_endpoint, "?q=", 
                       gsub(" ", "%20", artist),
                       "&type=", search_type)
  
  results <- GET(search_url, auth_token)
  results <- content(results)
  
  artist_id <- results$artists$items[[1]]$id
  
  return(artist_id)
  
}

#This part returns genre info only. ex: get_artist genre(artist="radiohead") 

get_artist_genre <- function(artist = "bob dylan"){
  artist_info <- GET(paste0(base, artist_endpoint, get_artist_ID(artist)),
                     auth_token)
  
  artist_txt <- content(artist_info, "text")
  
  artist_list <- fromJSON(artist_txt, flatten = TRUE)
  return(artist_list$genres)
  
}

#Steps for creating Superstar Status control variable 
# Superstar status = the single has been on the charts for more than 100 weeks

#define data frame and make sure totalweeks is nuemric and values aren't changing- DESTRING!!!!
small_spotify <-Spotify_dataset[1:100,]
install.packages("taRifx")
library(taRifx)
destring(small_spotify$totalweeks)
small_spotify$totalweeks <- as.numeric(as.character(small_spotify$totalweeks))

# Loop over total weeks to print out status 

superlist <- list()

for (i in 1:nrow(small_spotify)) {
  totalweeks_small <- small_spotify[i,"totalweeks"]
  artist_small <- small_spotify [i,"artist"]
  track_small <- small_spotify[i,"title"]
  if (totalweeks_small >= 100) {
    superlist[i]<- print(paste("superstar"))
    
  } else {
    superlist[i]<- print(paste("no"))
  }
} 

#Add results to data frame 

super_vec <- c("superlist")
small_spotify$status <- c(superlist)
small_spotify
status <- c(small_spotify$status)


install.packages("purrr")
library(purrr)
# subset data (make sure rank is included in dataframe) 
#1-50 cuz 1-100 isnt working?- will have to fix this. 

genre_test <- c(small_spotify[1:50,2])
genre_test[] <- as.character(genre_test)
                                             #Test
                                              genre_test
                                              class(genre_test)
                                              is.atomic(genre_test)
library(purrr)
artist_chart_list <- vector("list", length = length(genre_test))
names(artist_chart_list) <- genre_test

ar_gen1 <- map(genre_test, get_artist_genre)

#get the second half  of the artist genres

genre_test2 <- c(small_spotify[51:100,2])
genre_test2[] <- as.character(genre_test2)
                                            #Test
                                            genre_test2
                                            class(genre_test2)
                                            is.atomic(genre_test2)

artist_chart_list2 <- vector("list", length = length(genre_test2))
names(artist_chart_list2) <- genre_test2
ar_gen2 <- map(genre_test2, get_artist_genre)

# merge lists 
        ar_gen_list <- append(ar_gen1,ar_gen2, after= 50)
        
        
#clean up artist genre info text 
        ar_gen_list <- noquote(ar_gen_list)
        ar_gen_list <- gsub("c(", "", ar_gen_list, fixed="TRUE")
        ar_gen_list <- gsub(")", "", ar_gen_list, fixed="TRUE")
        gsub('\"', "", tidySD$Ar.fixed = TRUE)
        
        
 #Add artist genre info. to descriptive data frame 
         ar_gen_vec <- c("ar_gen_list")
         small_spotify$ArtistGenre <- c(ar_gen_list)
         small_spotify
        
        
        
                                       #Getting artist type metadata from Musicbrainz API 
 
devtools::install_github("dmi3kno/musicbrainz")
install.packages("dplyr")
install.packages("furrr")
install.packages("purrr")
library(purrr)
library(furrr)
library(dplyr)
library(musicbrainz)

# edit wrapper search_artist function
                            my_typesearch <- function(x)
                            {search_artists(x, limit = 1) %>% 
                                select(name, type, gender)}

#apply function to list subset of descriptive data frame 

                  list_test_3 <- c(small_spotify[1:100,2])
                  list_test_3 [] <- as.character(list_test_3)
                  testing_list_4 <- vector("list", length = length(list_test_3))
                  names(testing_list_4) <- list_test_3

                testing_list_5 <- map_df(list_test_3, my_typesearch)

#merge type and gender and edit fields 
install.packages("tidyr")                
library(tidyr)
            ArtistType <- paste(testing_list_5$type,testing_list_5$gender, sep = " ")
            ArtistType<- gsub("Person","Solo",ArtistType)
            ArtistType <- gsub("NA",'', ArtistType)

#add to data frame 
                              small_spotify$type <- c(ArtistType)
                              
                              
                              
                              
                              
                              
                                            #MusicxMatch API to get Track Genre 
  install.packages ("devtools")
  library(devtools)
  install_github("fernandabruno/musixmatchR")
  library(musixmatchR)
  
  #Set up environment. 
              apikey <- "XXXXXXXXXXXXXXXX"
              ArtistTrack <- small_spotify[,2:3]
              colnames(ArtistTrack)<- c("Artist", "Track")
                 
 #define function 
             song_genre <- function(x= artist, y= track) {
              output <- searchTrack(x, y,apikey)
              output_1 <-head(output[["song_genre"]],1)
              output_2 <- as.character(as.factor(output_1))
              return(paste(output_2))
            }
  #iterate 
              song_1 <- ArtistTrack %>% rowwise %>% 
              mutate(stuff = song_genre(Artist,Track)) %>%
              tidyr::separate(stuff,c("Track Genre 1", " Track Genre 2"), sep = ",") 
              
    #add track genre to descriptive data frame 
    
          song_2 <- song_1 %>%
         select(`Track Genre 1`, ` Track Genre 2`)
       
      small_spotify <- cbind(small_spotify, song_2)
      
# organize, rename cols, split artist genre. 
        library(tidyverse)
         
         colnames(small_spotify) <- c("Rank", "Artist", "Title", "Total Streams", "Total Weeks", "Status", "Artist Genre", "Track Genre 1", "Track Genre 2")
        
        small_spotify <-separate(small_spotify, 'Artist Genre',into = c("Ar.Genre1", "Ar.Genre2", "Ar.Genre3"), sep= ",") 




            # Spotify API with wrapper to get track audio features, track popularity, an artists number of followers. 

devtools::install_github('charlie86/spotifyr')
devtools::install_github('JosiahParry/geniusR')
library(spotifyr)

Sys.setenv(SPOTIFY_CLIENT_ID = "XXXXXXXXXX")
Sys.setenv(SPOTIFY_CLIENT_SECRET = "XXXXXXXXXXXXXX")

access_token <- get_spotify_access_token()
      
                 
                 #Create data frame with Artist and track Uris'. URIs are used for the rest of the look ups I need in this wrapper. 

#Define function from get_tracks wrapper function 
#we want a data frame 

                URIs <- function(x=Track) {
                  output <- get_tracks(x, return_closest_track = TRUE) %>%
                    select(artist_uri)
                 output2 <- get_tracks(x, return_closest_track = TRUE) %>%
                   select(track_uri)
                 hey<-data.frame(output, output2)
                 colnames(hey) <- c("artisturi","trackuri")
                 return(hey)
                }
          # lil is just the artist and track name, uri_info is a data frame of URI info, bind uri info to small_spotify 

          lil <- ArtistTrack[1:100,2] 
          uri_info <-map_df(lil,URIs)
          small_spotify <- cbind(small_spotify,uri_info)
          
  # Make sure each URI is unique so we can use URI for searches.... find and replace duplicates 
              small_spotify %>%
              filter(duplicated(small_spotify$track_uri))
  
  #Replace dubplicate Track URIS found in row 56 and 38 
                            small_spotify[56,14] <- "50kpGaPAhYJ3sGmk6vplg0"
                            small_spotify[56,13] <- "1uNFoZAHBGtllmzznpCI3s"
                            small_spotify[38,13] <- "1uNFoZAHBGtllmzznpCI3s"
                            small_spotify[38,14] <- "09CtPGIpYB4BrO8qb1RGsF"

                        # Add Track popularity to Small_spotify 
                       
  #Track popularity function 
                track_pop <- function(x) {
                  output <- get_track_popularity(x)
                  output <- data.frame(x, output, stringsAsFactors = FALSE)
                  return(output) 
                }
# Use function to iterate over list of tracks 
                  e <- track_pop(tracks) 
                  e <- e %>% select(track_popularity)
#add to data frame.  
                  small_spotify <- cbind(small_spotify,e)
                  cbind(small_spotify,e)
                  
                  
                  
                                # repeat the process for number of artist followers. 
#define function
                      artist_follow <- function(x){ 
                        output<- get_artists(x, return_closest_artist =  TRUE)
                        output <- output %>% select(artist_num_followers)
                        return(output)}
#use map function to get data frame output of artist followers. 
                          w <- map_df(small_spotify$Artist, artist_follow)
                          small_spotify <- cbind(small_spotify,w)
                          
                                                   # Get Album each track is on. 
         
         album <- function(x, y){
           out <- get_tracks(x, y, return_closest_track = TRUE)
           out <-  head(out[["album_name"]],1)
           return(paste(out))}
         
         alb_1 <- ArtistTrack %>% rowwise %>% 
           mutate(trackalbum = album(Track,Artist))
           
           small_spotify <- cbind(small_spotify, alb_1)
           
